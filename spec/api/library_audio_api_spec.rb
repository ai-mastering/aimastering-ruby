=begin
#AI Mastering API

#This is a AI Mastering API document. You can use the mastering feature of [AI Mastering](https://aimastering.com) through this API.

OpenAPI spec version: 1.0.0
Contact: info@bakuage.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Aimastering::LibraryAudioApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'LibraryAudioApi' do
  before do
    # run before each test
    @instance = Aimastering::LibraryAudioApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LibraryAudioApi' do
    it 'should create an instance of LibraryAudioApi' do
      expect(@instance).to be_instance_of(Aimastering::LibraryAudioApi)
    end
  end

  # unit tests for create_library_audio
  # Create a new library audio.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file The file to upload.
  # @return [LibraryAudio]
  describe 'create_library_audio test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_library_audio_like
  # Create a new library audio like.
  # 
  # @param id Library audio id
  # @param [Hash] opts the optional parameters
  # @return [LibraryAudioLike]
  describe 'create_library_audio_like test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_library_audio
  # Delete library audio.
  # 
  # @param id Library audio id
  # @param [Hash] opts the optional parameters
  # @return [LibraryAudio]
  describe 'delete_library_audio test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_library_audio
  # Get a library audio by id.
  # 
  # @param id Library audio id
  # @param [Hash] opts the optional parameters
  # @return [LibraryAudio]
  describe 'get_library_audio test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_library_audio_analysis
  # Get a library audio analysis by id.
  # 
  # @param id Library audio id
  # @param [Hash] opts the optional parameters
  # @return [LibraryAudioAnalysis]
  describe 'get_library_audio_analysis test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_library_audios
  # Get all library audios accessable.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<LibraryAudio>]
  describe 'list_library_audios test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_library_audio
  # Update library audio.
  # 
  # @param id Library audio id
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :is_public Whether the library audio is public.
  # @return [LibraryAudio]
  describe 'update_library_audio test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
