=begin
#AI Mastering API

#This is a AI Mastering API document. You can use the mastering feature of [AI Mastering](https://aimastering.com) through this API.

OpenAPI spec version: 1.0.0
Contact: aimasteringcom@gmail.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module Aimastering
  class MasteringApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Cancel a mastering by id.
    # 
    # @param id Mastering id
    # @param [Hash] opts the optional parameters
    # @return [Mastering]
    def cancel_mastering(id, opts = {})
      data, _status_code, _headers = cancel_mastering_with_http_info(id, opts)
      return data
    end

    # Cancel a mastering by id.
    # 
    # @param id Mastering id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Mastering, Fixnum, Hash)>] Mastering data, response status code and response headers
    def cancel_mastering_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MasteringApi.cancel_mastering ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasteringApi.cancel_mastering"
      end
      if @api_client.config.client_side_validation && id < 1
        fail ArgumentError, 'invalid value for "id" when calling MasteringApi.cancel_mastering, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/masterings/{id}/cancel".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Mastering')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasteringApi#cancel_mastering\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new mastering.
    # 
    # @param input_audio_id Input audio id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mode Mode (default to default)
    # @option opts [BOOLEAN] :bass_preservation This parameter represents if the bass preservation is enabled. (default to false)
    # @option opts [BOOLEAN] :mastering This parameter represents if the mastering is enabled. This parameter is effective only when the mode is \&quot;default\&quot; or \&quot;custom\&quot;. (default to true)
    # @option opts [String] :preset This parameter is effective only when the mode is \&quot;preset\&quot;. (default to general)
    # @option opts [Float] :target_loudness This parameter represents the target loudness of the output audio in dB. This parameter is effective only when the mode is \&quot;custom\&quot;. (default to -5.0)
    # @option opts [Float] :mastering_matching_level This parameter represents the mastering reference matching level. This parameter is effective only when the mode is \&quot;custom\&quot; and the mastering is enabled. (default to 0.5)
    # @option opts [BOOLEAN] :mastering_reverb This parameter represents if the mastering reverb is enabled. This parameter is effective only when the mode is \&quot;custom\&quot; and the mastering is enabled. (default to false)
    # @option opts [Float] :mastering_reverb_gain This parameter represents the mastering reverb gain relative to the dry sound in dB. This parameter is effective only when the mode is \&quot;custom\&quot; and the mastering is \&quot;true\&quot; and the mastering_reverb is \&quot;true\&quot;. (default to -36.0)
    # @option opts [Integer] :reference_audio_id Reference audio id. This parameter is effective only when the mode is \&quot;custom\&quot; and the mastering is enabled.
    # @option opts [Float] :low_cut_freq This parameter represents the low cut freq  of the output audio in Hz. This parameter is effective only when the mode is \&quot;custom\&quot;. (default to 20.0)
    # @option opts [Float] :high_cut_freq This parameter represents the target loudness of the output audio in Hz. This parameter is effective only when the mode is \&quot;custom\&quot;. (default to 20000.0)
    # @option opts [Integer] :sample_rate This parameter represents the sample rate of the output audio in dB. This parameter is effective only when the mode is \&quot;custom\&quot;. (default to 44100)
    # @option opts [Integer] :bit_depth This parameter represents the bit depth of the output audio in dB. This parameter is effective only when the mode is \&quot;custom\&quot;. (default to 16)
    # @option opts [String] :output_format This parameter represents the format of the output audio. This parameter is effective only when the mode is \&quot;custom\&quot;. (default to wav)
    # @option opts [BOOLEAN] :for_preview If this is true, the mastering is treated for preview purpose (ex. not purchasable, not publishable, short lifetime).  (default to false)
    # @option opts [Float] :start_at Partial mastering start at.  (default to 0.0)
    # @option opts [Float] :end_at Partial mastering end at.  (default to -1.0)
    # @option opts [BOOLEAN] :is_bakuage Deprecated. For backward compatibility. (default to false)
    # @return [Mastering]
    def create_mastering(input_audio_id, opts = {})
      data, _status_code, _headers = create_mastering_with_http_info(input_audio_id, opts)
      return data
    end

    # Create a new mastering.
    # 
    # @param input_audio_id Input audio id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mode Mode
    # @option opts [BOOLEAN] :bass_preservation This parameter represents if the bass preservation is enabled.
    # @option opts [BOOLEAN] :mastering This parameter represents if the mastering is enabled. This parameter is effective only when the mode is \&quot;default\&quot; or \&quot;custom\&quot;.
    # @option opts [String] :preset This parameter is effective only when the mode is \&quot;preset\&quot;.
    # @option opts [Float] :target_loudness This parameter represents the target loudness of the output audio in dB. This parameter is effective only when the mode is \&quot;custom\&quot;.
    # @option opts [Float] :mastering_matching_level This parameter represents the mastering reference matching level. This parameter is effective only when the mode is \&quot;custom\&quot; and the mastering is enabled.
    # @option opts [BOOLEAN] :mastering_reverb This parameter represents if the mastering reverb is enabled. This parameter is effective only when the mode is \&quot;custom\&quot; and the mastering is enabled.
    # @option opts [Float] :mastering_reverb_gain This parameter represents the mastering reverb gain relative to the dry sound in dB. This parameter is effective only when the mode is \&quot;custom\&quot; and the mastering is \&quot;true\&quot; and the mastering_reverb is \&quot;true\&quot;.
    # @option opts [Integer] :reference_audio_id Reference audio id. This parameter is effective only when the mode is \&quot;custom\&quot; and the mastering is enabled.
    # @option opts [Float] :low_cut_freq This parameter represents the low cut freq  of the output audio in Hz. This parameter is effective only when the mode is \&quot;custom\&quot;.
    # @option opts [Float] :high_cut_freq This parameter represents the target loudness of the output audio in Hz. This parameter is effective only when the mode is \&quot;custom\&quot;.
    # @option opts [Integer] :sample_rate This parameter represents the sample rate of the output audio in dB. This parameter is effective only when the mode is \&quot;custom\&quot;.
    # @option opts [Integer] :bit_depth This parameter represents the bit depth of the output audio in dB. This parameter is effective only when the mode is \&quot;custom\&quot;.
    # @option opts [String] :output_format This parameter represents the format of the output audio. This parameter is effective only when the mode is \&quot;custom\&quot;.
    # @option opts [BOOLEAN] :for_preview If this is true, the mastering is treated for preview purpose (ex. not purchasable, not publishable, short lifetime). 
    # @option opts [Float] :start_at Partial mastering start at. 
    # @option opts [Float] :end_at Partial mastering end at. 
    # @option opts [BOOLEAN] :is_bakuage Deprecated. For backward compatibility.
    # @return [Array<(Mastering, Fixnum, Hash)>] Mastering data, response status code and response headers
    def create_mastering_with_http_info(input_audio_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MasteringApi.create_mastering ..."
      end
      # verify the required parameter 'input_audio_id' is set
      if @api_client.config.client_side_validation && input_audio_id.nil?
        fail ArgumentError, "Missing the required parameter 'input_audio_id' when calling MasteringApi.create_mastering"
      end
      if @api_client.config.client_side_validation && input_audio_id < 1
        fail ArgumentError, 'invalid value for "input_audio_id" when calling MasteringApi.create_mastering, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && opts[:'mode'] && !['default', 'custom', 'preset'].include?(opts[:'mode'])
        fail ArgumentError, 'invalid value for "mode", must be one of default, custom, preset'
      end
      if @api_client.config.client_side_validation && opts[:'preset'] && !['general', 'pop', 'classical', 'jazz'].include?(opts[:'preset'])
        fail ArgumentError, 'invalid value for "preset", must be one of general, pop, classical, jazz'
      end
      if @api_client.config.client_side_validation && !opts[:'mastering_matching_level'].nil? && opts[:'mastering_matching_level'] > 1
        fail ArgumentError, 'invalid value for "opts[:"mastering_matching_level"]" when calling MasteringApi.create_mastering, must be smaller than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'mastering_matching_level'].nil? && opts[:'mastering_matching_level'] < 0
        fail ArgumentError, 'invalid value for "opts[:"mastering_matching_level"]" when calling MasteringApi.create_mastering, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'reference_audio_id'].nil? && opts[:'reference_audio_id'] < 1
        fail ArgumentError, 'invalid value for "opts[:"reference_audio_id"]" when calling MasteringApi.create_mastering, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'low_cut_freq'].nil? && opts[:'low_cut_freq'] < 0
        fail ArgumentError, 'invalid value for "opts[:"low_cut_freq"]" when calling MasteringApi.create_mastering, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'high_cut_freq'].nil? && opts[:'high_cut_freq'] < 0
        fail ArgumentError, 'invalid value for "opts[:"high_cut_freq"]" when calling MasteringApi.create_mastering, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && opts[:'output_format'] && !['wav', 'mp3'].include?(opts[:'output_format'])
        fail ArgumentError, 'invalid value for "output_format", must be one of wav, mp3'
      end
      # resource path
      local_var_path = "/masterings"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["input_audio_id"] = input_audio_id
      form_params["mode"] = opts[:'mode'] if !opts[:'mode'].nil?
      form_params["bass_preservation"] = opts[:'bass_preservation'] if !opts[:'bass_preservation'].nil?
      form_params["mastering"] = opts[:'mastering'] if !opts[:'mastering'].nil?
      form_params["preset"] = opts[:'preset'] if !opts[:'preset'].nil?
      form_params["target_loudness"] = opts[:'target_loudness'] if !opts[:'target_loudness'].nil?
      form_params["mastering_matching_level"] = opts[:'mastering_matching_level'] if !opts[:'mastering_matching_level'].nil?
      form_params["mastering_reverb"] = opts[:'mastering_reverb'] if !opts[:'mastering_reverb'].nil?
      form_params["mastering_reverb_gain"] = opts[:'mastering_reverb_gain'] if !opts[:'mastering_reverb_gain'].nil?
      form_params["reference_audio_id"] = opts[:'reference_audio_id'] if !opts[:'reference_audio_id'].nil?
      form_params["low_cut_freq"] = opts[:'low_cut_freq'] if !opts[:'low_cut_freq'].nil?
      form_params["high_cut_freq"] = opts[:'high_cut_freq'] if !opts[:'high_cut_freq'].nil?
      form_params["sample_rate"] = opts[:'sample_rate'] if !opts[:'sample_rate'].nil?
      form_params["bit_depth"] = opts[:'bit_depth'] if !opts[:'bit_depth'].nil?
      form_params["output_format"] = opts[:'output_format'] if !opts[:'output_format'].nil?
      form_params["for_preview"] = opts[:'for_preview'] if !opts[:'for_preview'].nil?
      form_params["start_at"] = opts[:'start_at'] if !opts[:'start_at'].nil?
      form_params["end_at"] = opts[:'end_at'] if !opts[:'end_at'].nil?
      form_params["is_bakuage"] = opts[:'is_bakuage'] if !opts[:'is_bakuage'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Mastering')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasteringApi#create_mastering\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete mastering.
    # 
    # @param id Mastering id
    # @param [Hash] opts the optional parameters
    # @return [Mastering]
    def delete_mastering(id, opts = {})
      data, _status_code, _headers = delete_mastering_with_http_info(id, opts)
      return data
    end

    # Delete mastering.
    # 
    # @param id Mastering id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Mastering, Fixnum, Hash)>] Mastering data, response status code and response headers
    def delete_mastering_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MasteringApi.delete_mastering ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasteringApi.delete_mastering"
      end
      if @api_client.config.client_side_validation && id < 1
        fail ArgumentError, 'invalid value for "id" when calling MasteringApi.delete_mastering, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/masterings/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Mastering')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasteringApi#delete_mastering\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a mastering by id.
    # 
    # @param id Mastering id
    # @param [Hash] opts the optional parameters
    # @return [Mastering]
    def get_mastering(id, opts = {})
      data, _status_code, _headers = get_mastering_with_http_info(id, opts)
      return data
    end

    # Get a mastering by id.
    # 
    # @param id Mastering id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Mastering, Fixnum, Hash)>] Mastering data, response status code and response headers
    def get_mastering_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MasteringApi.get_mastering ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasteringApi.get_mastering"
      end
      if @api_client.config.client_side_validation && id < 1
        fail ArgumentError, 'invalid value for "id" when calling MasteringApi.get_mastering, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/masterings/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Mastering')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasteringApi#get_mastering\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review a mastering by id.
    # 
    # @param id Mastering id
    # @param [Hash] opts the optional parameters
    # @return [Mastering]
    def get_mastering_unlock_product(id, opts = {})
      data, _status_code, _headers = get_mastering_unlock_product_with_http_info(id, opts)
      return data
    end

    # Review a mastering by id.
    # 
    # @param id Mastering id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Mastering, Fixnum, Hash)>] Mastering data, response status code and response headers
    def get_mastering_unlock_product_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MasteringApi.get_mastering_unlock_product ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasteringApi.get_mastering_unlock_product"
      end
      if @api_client.config.client_side_validation && id < 1
        fail ArgumentError, 'invalid value for "id" when calling MasteringApi.get_mastering_unlock_product, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/masterings/{id}/unlock_product".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Mastering')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasteringApi#get_mastering_unlock_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all accessable masterings.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Mastering>]
    def list_masterings(opts = {})
      data, _status_code, _headers = list_masterings_with_http_info(opts)
      return data
    end

    # Get all accessable masterings.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Mastering>, Fixnum, Hash)>] Array<Mastering> data, response status code and response headers
    def list_masterings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MasteringApi.list_masterings ..."
      end
      # resource path
      local_var_path = "/masterings"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Mastering>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasteringApi#list_masterings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publish a mastering by id.
    # 
    # @param id Mastering id
    # @param access_token This parameter represents if the access token of the publishment service API.
    # @param message This parameter represents the publishment message.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :service This parameter represents the publishment service.
    # @option opts [String] :access_token_secret This parameter represents the access token secret of the publishment service API. This parameter is effective only when the service is \&quot;twitter\&quot;.
    # @return [Mastering]
    def publish_mastering(id, access_token, message, opts = {})
      data, _status_code, _headers = publish_mastering_with_http_info(id, access_token, message, opts)
      return data
    end

    # Publish a mastering by id.
    # 
    # @param id Mastering id
    # @param access_token This parameter represents if the access token of the publishment service API.
    # @param message This parameter represents the publishment message.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :service This parameter represents the publishment service.
    # @option opts [String] :access_token_secret This parameter represents the access token secret of the publishment service API. This parameter is effective only when the service is \&quot;twitter\&quot;.
    # @return [Array<(Mastering, Fixnum, Hash)>] Mastering data, response status code and response headers
    def publish_mastering_with_http_info(id, access_token, message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MasteringApi.publish_mastering ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasteringApi.publish_mastering"
      end
      if @api_client.config.client_side_validation && id < 1
        fail ArgumentError, 'invalid value for "id" when calling MasteringApi.publish_mastering, must be greater than or equal to 1.'
      end

      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling MasteringApi.publish_mastering"
      end
      # verify the required parameter 'message' is set
      if @api_client.config.client_side_validation && message.nil?
        fail ArgumentError, "Missing the required parameter 'message' when calling MasteringApi.publish_mastering"
      end
      if @api_client.config.client_side_validation && opts[:'service'] && !['twitter', 'youtube'].include?(opts[:'service'])
        fail ArgumentError, 'invalid value for "service", must be one of twitter, youtube'
      end
      # resource path
      local_var_path = "/masterings/{id}/publish".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["access_token"] = access_token
      form_params["message"] = message
      form_params["service"] = opts[:'service'] if !opts[:'service'].nil?
      form_params["access_token_secret"] = opts[:'access_token_secret'] if !opts[:'access_token_secret'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Mastering')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasteringApi#publish_mastering\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review a mastering by id.
    # 
    # @param id Mastering id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :review_comment This parameter represents the review comment.
    # @option opts [Float] :review_score This parameter represents the review score.
    # @return [Mastering]
    def review_mastering(id, opts = {})
      data, _status_code, _headers = review_mastering_with_http_info(id, opts)
      return data
    end

    # Review a mastering by id.
    # 
    # @param id Mastering id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :review_comment This parameter represents the review comment.
    # @option opts [Float] :review_score This parameter represents the review score.
    # @return [Array<(Mastering, Fixnum, Hash)>] Mastering data, response status code and response headers
    def review_mastering_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MasteringApi.review_mastering ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MasteringApi.review_mastering"
      end
      if @api_client.config.client_side_validation && id < 1
        fail ArgumentError, 'invalid value for "id" when calling MasteringApi.review_mastering, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'review_score'].nil? && opts[:'review_score'] > 1
        fail ArgumentError, 'invalid value for "opts[:"review_score"]" when calling MasteringApi.review_mastering, must be smaller than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'review_score'].nil? && opts[:'review_score'] < 0
        fail ArgumentError, 'invalid value for "opts[:"review_score"]" when calling MasteringApi.review_mastering, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/masterings/{id}/review".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["review_comment"] = opts[:'review_comment'] if !opts[:'review_comment'].nil?
      form_params["review_score"] = opts[:'review_score'] if !opts[:'review_score'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Mastering')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MasteringApi#review_mastering\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
